/**
 * This code was KIND OF SORT OF generated by v0 by Vercel.
 * @see https://v0.dev/t/XnytctHKrXG
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
'use client'

import { useState } from 'react'
import type { FormEvent, ChangeEvent } from 'react'
import { CardContent, CardFooter } from 'components/ui/card'
import { Label } from 'components/ui/label'
import { Input } from 'components/ui/input'
import { Button } from 'components/ui/button'
import toast from 'react-hot-toast'
import Loading from 'app/loading'
import SelectMultipleLanguages from 'components/select-multiple-languages'
import supabase from 'lib/supabase-client'

import { useProfile } from 'app/data/hooks'
import AvatarEditor from 'app/profile/avatar-edit'
import SelectOneLanguage from '../../components/select-one-language'
import { useQueryClient, useMutation } from '@tanstack/react-query'

export default function UpdateProfileForm() {
  const { data } = useProfile()
  return !data ? <Loading className="mt-0" /> : <Form initialData={data} />
}

const Form = ({
  initialData: {
    username,
    language_primary,
    languages_spoken,
    avatar_url,
    uid,
  },
}) => {
  const queryClient = useQueryClient()

  const [formData, setFormData] = useState({
    username,
    language_primary,
    languages_spoken,
    avatar_url,
  })

  const updateProfile = useMutation({
    mutationFn: async () => {
      // console.log(`submiting formData`, formData)
      const { data, error } = await supabase
        .from('user_profile')
        .update(formData)
        .match({ uid })
        .select()

      if (error) throw error
      return data
    },
    onSuccess: () => {
      toast.success(`Successfully updated your profile`)
      queryClient.invalidateQueries({ queryKey: ['user_profile'] })
    },
  })

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    updateProfile.mutate()
  }
  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.id]: e.target.value,
    })
  }

  return (
    <form onSubmit={handleSubmit}>
      <CardContent>
        <div className="flex flex-col @lg:flex-row gap-4 justify-between">
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="username">Username</Label>
              <Input
                id="username"
                placeholder="Enter your username"
                value={formData.username}
                onChange={handleInputChange}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="language">Primary Language</Label>
              <SelectOneLanguage
                value={formData?.language_primary}
                setValue={(val: string) =>
                  setFormData({ ...formData, language_primary: val })
                }
              />
            </div>
            <div className="space-y-2">
              <SelectMultipleLanguages
                selectedLanguages={formData?.languages_spoken}
                setSelectedLanguages={val =>
                  setFormData({ ...formData, languages_spoken: val })
                }
                except={formData?.language_primary}
              />
            </div>
          </div>
          <div className="flex flex-col">
            <Label htmlFor="avatar_url">Avatar</Label>
            <AvatarEditor
              url={formData?.avatar_url}
              onUpload={url =>
                setFormData({
                  ...formData,
                  avatar_url: url,
                })
              }
            />
          </div>
        </div>
        {updateProfile.error && (
          <div className="alert alert-error mt-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              className="h-6 w-6 shrink-0 stroke-current"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            {updateProfile.error?.code === '23514'
              ? 'For some reason your username needs to be between 3 and 100 characters (but you can add a space)'
              : updateProfile.error?.message}
          </div>
        )}
      </CardContent>

      <CardFooter>
        <Button type="submit" className="ml-auto btn-primary btn-lg text-lg">
          Save Changes
        </Button>
      </CardFooter>
    </form>
  )
}
