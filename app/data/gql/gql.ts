/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation Mutation($objects: [UserDeckInsertInput!]!) {\n    insertIntoUserDeckCollection(objects: $objects) {\n      records {\n        lang\n        id\n      }\n    }\n  }\n": types.MutationDocument,
    "\n  mutation InsertIntoUserCardCollection($objects: [UserCardInsertInput!]!) {\n    insertIntoUserCardCollection(objects: $objects) {\n      records {\n        userDeckId\n        phraseId\n        id\n        status\n      }\n    }\n  }\n": types.InsertIntoUserCardCollectionDocument,
    "\n  mutation IntertIntoPhraseCollection($objects: [PhraseInsertInput!]!) {\n    insertIntoPhraseCollection(objects: $objects) {\n      records {\n        lang\n        id\n        text\n      }\n    }\n  }\n": types.IntertIntoPhraseCollectionDocument,
    "\n  mutation InsertIntoPhraseTranslationCollection(\n    $objects: [PhraseTranslationInsertInput!]!\n  ) {\n    insertIntoPhraseTranslationCollection(objects: $objects) {\n      records {\n        phraseId\n        id\n        text\n        lang\n        literal\n      }\n    }\n  }\n": types.InsertIntoPhraseTranslationCollectionDocument,
    "\n  query AllDecksQuery {\n    userDeckCollection {\n      edges {\n        node {\n          id\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phraseId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AllDecksQueryDocument,
    "\n  query AllPhraseDetailsQuery {\n    phraseCollection {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.AllPhraseDetailsQueryDocument,
    "\n  query UserDeckQuery($filter: UserDeckFilter) {\n    userDeckCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          uid\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phrase {\n                  id\n                  text\n                  lang\n                  phraseTranslationCollection {\n                    edges {\n                      node {\n                        id\n                        text\n                        lang\n                        literal\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UserDeckQueryDocument,
    "\n  query LanguageDetailsQuery($filter: LanguageFilter) {\n    languageCollection(filter: $filter) {\n      edges {\n        node {\n          lang\n          name\n          phraseCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n                phraseTranslationCollection {\n                  edges {\n                    node {\n                      id\n                      lang\n                      text\n                    }\n                  }\n                }\n                phraseSeeAlsoCollection {\n                  edges {\n                    node {\n                      fromPhrase {\n                        id\n                        text\n                        lang\n                      }\n                      toPhrase {\n                        id\n                        text\n                        lang\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.LanguageDetailsQueryDocument,
    "\n  query PhraseCollection($filter: PhraseFilter) {\n    phraseCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          userCardCollection {\n            edges {\n              node {\n                userDeckId\n                status\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.PhraseCollectionDocument,
    "\n  query UserProfileQuery {\n    userProfileCollection {\n      edges {\n        node {\n          username\n          languagePrimary\n          languagesSpoken\n          avatarUrl\n        }\n      }\n    }\n  }\n": types.UserProfileQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Mutation($objects: [UserDeckInsertInput!]!) {\n    insertIntoUserDeckCollection(objects: $objects) {\n      records {\n        lang\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation Mutation($objects: [UserDeckInsertInput!]!) {\n    insertIntoUserDeckCollection(objects: $objects) {\n      records {\n        lang\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertIntoUserCardCollection($objects: [UserCardInsertInput!]!) {\n    insertIntoUserCardCollection(objects: $objects) {\n      records {\n        userDeckId\n        phraseId\n        id\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertIntoUserCardCollection($objects: [UserCardInsertInput!]!) {\n    insertIntoUserCardCollection(objects: $objects) {\n      records {\n        userDeckId\n        phraseId\n        id\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation IntertIntoPhraseCollection($objects: [PhraseInsertInput!]!) {\n    insertIntoPhraseCollection(objects: $objects) {\n      records {\n        lang\n        id\n        text\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation IntertIntoPhraseCollection($objects: [PhraseInsertInput!]!) {\n    insertIntoPhraseCollection(objects: $objects) {\n      records {\n        lang\n        id\n        text\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InsertIntoPhraseTranslationCollection(\n    $objects: [PhraseTranslationInsertInput!]!\n  ) {\n    insertIntoPhraseTranslationCollection(objects: $objects) {\n      records {\n        phraseId\n        id\n        text\n        lang\n        literal\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InsertIntoPhraseTranslationCollection(\n    $objects: [PhraseTranslationInsertInput!]!\n  ) {\n    insertIntoPhraseTranslationCollection(objects: $objects) {\n      records {\n        phraseId\n        id\n        text\n        lang\n        literal\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllDecksQuery {\n    userDeckCollection {\n      edges {\n        node {\n          id\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phraseId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllDecksQuery {\n    userDeckCollection {\n      edges {\n        node {\n          id\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phraseId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllPhraseDetailsQuery {\n    phraseCollection {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllPhraseDetailsQuery {\n    phraseCollection {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserDeckQuery($filter: UserDeckFilter) {\n    userDeckCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          uid\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phrase {\n                  id\n                  text\n                  lang\n                  phraseTranslationCollection {\n                    edges {\n                      node {\n                        id\n                        text\n                        lang\n                        literal\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserDeckQuery($filter: UserDeckFilter) {\n    userDeckCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          uid\n          lang\n          userCardCollection {\n            edges {\n              node {\n                id\n                status\n                phrase {\n                  id\n                  text\n                  lang\n                  phraseTranslationCollection {\n                    edges {\n                      node {\n                        id\n                        text\n                        lang\n                        literal\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LanguageDetailsQuery($filter: LanguageFilter) {\n    languageCollection(filter: $filter) {\n      edges {\n        node {\n          lang\n          name\n          phraseCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n                phraseTranslationCollection {\n                  edges {\n                    node {\n                      id\n                      lang\n                      text\n                    }\n                  }\n                }\n                phraseSeeAlsoCollection {\n                  edges {\n                    node {\n                      fromPhrase {\n                        id\n                        text\n                        lang\n                      }\n                      toPhrase {\n                        id\n                        text\n                        lang\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query LanguageDetailsQuery($filter: LanguageFilter) {\n    languageCollection(filter: $filter) {\n      edges {\n        node {\n          lang\n          name\n          phraseCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n                phraseTranslationCollection {\n                  edges {\n                    node {\n                      id\n                      lang\n                      text\n                    }\n                  }\n                }\n                phraseSeeAlsoCollection {\n                  edges {\n                    node {\n                      fromPhrase {\n                        id\n                        text\n                        lang\n                      }\n                      toPhrase {\n                        id\n                        text\n                        lang\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PhraseCollection($filter: PhraseFilter) {\n    phraseCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          userCardCollection {\n            edges {\n              node {\n                userDeckId\n                status\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PhraseCollection($filter: PhraseFilter) {\n    phraseCollection(filter: $filter) {\n      edges {\n        node {\n          id\n          text\n          lang\n          phraseTranslationCollection {\n            edges {\n              node {\n                id\n                text\n                lang\n              }\n            }\n          }\n          userCardCollection {\n            edges {\n              node {\n                userDeckId\n                status\n              }\n            }\n          }\n          phraseSeeAlsoCollection {\n            edges {\n              node {\n                fromPhrase {\n                  id\n                  text\n                  lang\n                }\n                toPhrase {\n                  id\n                  text\n                  lang\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserProfileQuery {\n    userProfileCollection {\n      edges {\n        node {\n          username\n          languagePrimary\n          languagesSpoken\n          avatarUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserProfileQuery {\n    userProfileCollection {\n      edges {\n        node {\n          username\n          languagePrimary\n          languagesSpoken\n          avatarUrl\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;