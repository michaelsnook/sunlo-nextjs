scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean!]
  is: FilterIs
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

type Language implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  name: String!
  lang: String!
  aliasOf: String
  phraseTranslationCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseTranslationFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseTranslationOrderBy!]
  ): PhraseTranslationConnection
  phraseCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseOrderBy!]
  ): PhraseConnection
  userDeckCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserDeckFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserDeckOrderBy!]
  ): UserDeckConnection
}

type LanguageConnection {
  edges: [LanguageEdge!]!
  pageInfo: PageInfo!
}

type LanguageDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Language!]!
}

type LanguageEdge {
  cursor: String!
  node: Language!
}

input LanguageFilter {
  name: StringFilter
  lang: StringFilter
  aliasOf: StringFilter
  nodeId: IDFilter
}

input LanguageInsertInput {
  name: String
  lang: String
  aliasOf: String
}

type LanguageInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Language!]!
}

input LanguageOrderBy {
  name: OrderByDirection
  lang: OrderByDirection
  aliasOf: OrderByDirection
}

input LanguageUpdateInput {
  name: String
  lang: String
  aliasOf: String
}

type LanguageUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Language!]!
}

"""
The root type for creating and mutating data
"""
type Mutation {
  """
  Deletes zero or more records from the `Language` collection
  """
  deleteFromLanguageCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: LanguageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): LanguageDeleteResponse!

  """
  Deletes zero or more records from the `Phrase` collection
  """
  deleteFromPhraseCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseDeleteResponse!

  """
  Deletes zero or more records from the `PhraseSeeAlso` collection
  """
  deleteFromPhraseSeeAlsoCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseSeeAlsoFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseSeeAlsoDeleteResponse!

  """
  Deletes zero or more records from the `PhraseTranslation` collection
  """
  deleteFromPhraseTranslationCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseTranslationFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseTranslationDeleteResponse!

  """
  Deletes zero or more records from the `UserCard` collection
  """
  deleteFromUserCardCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserCardFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserCardDeleteResponse!

  """
  Deletes zero or more records from the `UserDeck` collection
  """
  deleteFromUserDeckCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserDeckFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserDeckDeleteResponse!

  """
  Deletes zero or more records from the `UserProfile` collection
  """
  deleteFromUserProfileCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserProfileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserProfileDeleteResponse!

  """
  Deletes zero or more records from the `buckets` collection
  """
  deleteFrombucketsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: bucketsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): bucketsDeleteResponse!

  """
  Deletes zero or more records from the `migrations` collection
  """
  deleteFrommigrationsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: migrationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): migrationsDeleteResponse!

  """
  Deletes zero or more records from the `objects` collection
  """
  deleteFromobjectsCollection(
    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: objectsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): objectsDeleteResponse!

  """
  Adds one or more `Language` records to the collection
  """
  insertIntoLanguageCollection(
    objects: [LanguageInsertInput!]!
  ): LanguageInsertResponse

  """
  Adds one or more `Phrase` records to the collection
  """
  insertIntoPhraseCollection(
    objects: [PhraseInsertInput!]!
  ): PhraseInsertResponse

  """
  Adds one or more `PhraseSeeAlso` records to the collection
  """
  insertIntoPhraseSeeAlsoCollection(
    objects: [PhraseSeeAlsoInsertInput!]!
  ): PhraseSeeAlsoInsertResponse

  """
  Adds one or more `PhraseTranslation` records to the collection
  """
  insertIntoPhraseTranslationCollection(
    objects: [PhraseTranslationInsertInput!]!
  ): PhraseTranslationInsertResponse

  """
  Adds one or more `UserCard` records to the collection
  """
  insertIntoUserCardCollection(
    objects: [UserCardInsertInput!]!
  ): UserCardInsertResponse

  """
  Adds one or more `UserDeck` records to the collection
  """
  insertIntoUserDeckCollection(
    objects: [UserDeckInsertInput!]!
  ): UserDeckInsertResponse

  """
  Adds one or more `UserProfile` records to the collection
  """
  insertIntoUserProfileCollection(
    objects: [UserProfileInsertInput!]!
  ): UserProfileInsertResponse

  """
  Adds one or more `buckets` records to the collection
  """
  insertIntobucketsCollection(
    objects: [bucketsInsertInput!]!
  ): bucketsInsertResponse

  """
  Adds one or more `migrations` records to the collection
  """
  insertIntomigrationsCollection(
    objects: [migrationsInsertInput!]!
  ): migrationsInsertResponse

  """
  Adds one or more `objects` records to the collection
  """
  insertIntoobjectsCollection(
    objects: [objectsInsertInput!]!
  ): objectsInsertResponse

  """
  Updates zero or more records in the `Language` collection
  """
  updateLanguageCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: LanguageUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: LanguageFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): LanguageUpdateResponse!

  """
  Updates zero or more records in the `Phrase` collection
  """
  updatePhraseCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PhraseUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseUpdateResponse!

  """
  Updates zero or more records in the `PhraseSeeAlso` collection
  """
  updatePhraseSeeAlsoCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PhraseSeeAlsoUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseSeeAlsoFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseSeeAlsoUpdateResponse!

  """
  Updates zero or more records in the `PhraseTranslation` collection
  """
  updatePhraseTranslationCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PhraseTranslationUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: PhraseTranslationFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PhraseTranslationUpdateResponse!

  """
  Updates zero or more records in the `UserCard` collection
  """
  updateUserCardCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: UserCardUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserCardFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserCardUpdateResponse!

  """
  Updates zero or more records in the `UserDeck` collection
  """
  updateUserDeckCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: UserDeckUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserDeckFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserDeckUpdateResponse!

  """
  Updates zero or more records in the `UserProfile` collection
  """
  updateUserProfileCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: UserProfileUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: UserProfileFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): UserProfileUpdateResponse!

  """
  Updates zero or more records in the `buckets` collection
  """
  updatebucketsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: bucketsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: bucketsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): bucketsUpdateResponse!

  """
  Updates zero or more records in the `migrations` collection
  """
  updatemigrationsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: migrationsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: migrationsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): migrationsUpdateResponse!

  """
  Updates zero or more records in the `objects` collection
  """
  updateobjectsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: objectsUpdateInput!

    """
    Restricts the mutation's impact to records matching the criteria
    """
    filter: objectsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): objectsUpdateResponse!
}

interface Node {
  """
  Retrieves a record by `ID`
  """
  nodeId: ID!
}

"""
Defines a per-field sorting order
"""
enum OrderByDirection {
  """
  Ascending order, nulls first
  """
  AscNullsFirst

  """
  Ascending order, nulls last
  """
  AscNullsLast

  """
  Descending order, nulls first
  """
  DescNullsFirst

  """
  Descending order, nulls last
  """
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Phrase implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  text: String!
  id: UUID!
  addedBy: UUID
  lang: String
  language: Language
  phraseSeeAlsoCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseSeeAlsoFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseSeeAlsoOrderBy!]
  ): PhraseSeeAlsoConnection
  userCardCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserCardFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserCardOrderBy!]
  ): UserCardConnection
  phraseTranslationCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseTranslationFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseTranslationOrderBy!]
  ): PhraseTranslationConnection
}

type PhraseConnection {
  edges: [PhraseEdge!]!
  pageInfo: PageInfo!
}

type PhraseDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Phrase!]!
}

type PhraseEdge {
  cursor: String!
  node: Phrase!
}

input PhraseFilter {
  text: StringFilter
  id: UUIDFilter
  addedBy: UUIDFilter
  lang: StringFilter
  nodeId: IDFilter
}

input PhraseInsertInput {
  text: String
  id: UUID
  addedBy: UUID
  lang: String
}

type PhraseInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Phrase!]!
}

input PhraseOrderBy {
  text: OrderByDirection
  id: OrderByDirection
  addedBy: OrderByDirection
  lang: OrderByDirection
}

type PhraseSeeAlso implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  fromPhraseId: UUID
  toPhraseId: UUID
  id: UUID!
  addedBy: UUID
  fromPhrase: Phrase
  toPhrase: Phrase
}

type PhraseSeeAlsoConnection {
  edges: [PhraseSeeAlsoEdge!]!
  pageInfo: PageInfo!
}

type PhraseSeeAlsoDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseSeeAlso!]!
}

type PhraseSeeAlsoEdge {
  cursor: String!
  node: PhraseSeeAlso!
}

input PhraseSeeAlsoFilter {
  fromPhraseId: UUIDFilter
  toPhraseId: UUIDFilter
  id: UUIDFilter
  addedBy: UUIDFilter
  nodeId: IDFilter
}

input PhraseSeeAlsoInsertInput {
  fromPhraseId: UUID
  toPhraseId: UUID
  id: UUID
  addedBy: UUID
}

type PhraseSeeAlsoInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseSeeAlso!]!
}

input PhraseSeeAlsoOrderBy {
  fromPhraseId: OrderByDirection
  toPhraseId: OrderByDirection
  id: OrderByDirection
  addedBy: OrderByDirection
}

input PhraseSeeAlsoUpdateInput {
  fromPhraseId: UUID
  toPhraseId: UUID
  id: UUID
  addedBy: UUID
}

type PhraseSeeAlsoUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseSeeAlso!]!
}

type PhraseTranslation implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  text: String!
  literal: String
  id: UUID!
  phraseId: UUID!
  addedBy: UUID
  lang: String!
  language: Language
  phrase: Phrase
}

type PhraseTranslationConnection {
  edges: [PhraseTranslationEdge!]!
  pageInfo: PageInfo!
}

type PhraseTranslationDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseTranslation!]!
}

type PhraseTranslationEdge {
  cursor: String!
  node: PhraseTranslation!
}

input PhraseTranslationFilter {
  text: StringFilter
  literal: StringFilter
  id: UUIDFilter
  phraseId: UUIDFilter
  addedBy: UUIDFilter
  lang: StringFilter
  nodeId: IDFilter
}

input PhraseTranslationInsertInput {
  text: String
  literal: String
  id: UUID
  phraseId: UUID
  addedBy: UUID
  lang: String
}

type PhraseTranslationInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseTranslation!]!
}

input PhraseTranslationOrderBy {
  text: OrderByDirection
  literal: OrderByDirection
  id: OrderByDirection
  phraseId: OrderByDirection
  addedBy: OrderByDirection
  lang: OrderByDirection
}

input PhraseTranslationUpdateInput {
  text: String
  literal: String
  id: UUID
  phraseId: UUID
  addedBy: UUID
  lang: String
}

type PhraseTranslationUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [PhraseTranslation!]!
}

input PhraseUpdateInput {
  text: String
  id: UUID
  addedBy: UUID
  lang: String
}

type PhraseUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [Phrase!]!
}

"""
The root type for querying data
"""
type Query {
  """
  A pagable collection of type `buckets`
  """
  bucketsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: bucketsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [bucketsOrderBy!]
  ): bucketsConnection

  """
  A pagable collection of type `Language`
  """
  languageCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: LanguageFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [LanguageOrderBy!]
  ): LanguageConnection

  """
  A pagable collection of type `migrations`
  """
  migrationsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: migrationsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [migrationsOrderBy!]
  ): migrationsConnection

  """
  Retrieve a record by its `ID`
  """
  node(
    """
    The record's `ID`
    """
    nodeId: ID!
  ): Node

  """
  A pagable collection of type `objects`
  """
  objectsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: objectsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [objectsOrderBy!]
  ): objectsConnection

  """
  A pagable collection of type `Phrase`
  """
  phraseCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseOrderBy!]
  ): PhraseConnection

  """
  A pagable collection of type `PhraseSeeAlso`
  """
  phraseSeeAlsoCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseSeeAlsoFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseSeeAlsoOrderBy!]
  ): PhraseSeeAlsoConnection

  """
  A pagable collection of type `PhraseTranslation`
  """
  phraseTranslationCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: PhraseTranslationFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [PhraseTranslationOrderBy!]
  ): PhraseTranslationConnection

  """
  A pagable collection of type `UserCard`
  """
  userCardCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserCardFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserCardOrderBy!]
  ): UserCardConnection

  """
  A pagable collection of type `UserDeck`
  """
  userDeckCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserDeckFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserDeckOrderBy!]
  ): UserDeckConnection

  """
  A pagable collection of type `UserProfile`
  """
  userProfileCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserProfileFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserProfileOrderBy!]
  ): UserProfileConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  in: [String!]
  is: FilterIs
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

type UserCard implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  status: String!
  uid: UUID!
  id: UUID!
  phraseId: UUID!
  userDeckId: UUID
  updatedAt: Datetime
  userDeck: UserDeck
  userProfile: UserProfile
  phrase: Phrase
}

type UserCardConnection {
  edges: [UserCardEdge!]!
  pageInfo: PageInfo!
}

type UserCardDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserCard!]!
}

type UserCardEdge {
  cursor: String!
  node: UserCard!
}

input UserCardFilter {
  status: StringFilter
  uid: UUIDFilter
  id: UUIDFilter
  phraseId: UUIDFilter
  userDeckId: UUIDFilter
  updatedAt: DatetimeFilter
  nodeId: IDFilter
}

input UserCardInsertInput {
  status: String
  uid: UUID
  id: UUID
  phraseId: UUID
  userDeckId: UUID
  updatedAt: Datetime
}

type UserCardInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserCard!]!
}

input UserCardOrderBy {
  status: OrderByDirection
  uid: OrderByDirection
  id: OrderByDirection
  phraseId: OrderByDirection
  userDeckId: OrderByDirection
  updatedAt: OrderByDirection
}

input UserCardUpdateInput {
  status: String
  uid: UUID
  id: UUID
  phraseId: UUID
  userDeckId: UUID
  updatedAt: Datetime
}

type UserCardUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserCard!]!
}

type UserDeck implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  uid: UUID!
  lang: String
  language: Language
  userProfile: UserProfile
  userCardCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserCardFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserCardOrderBy!]
  ): UserCardConnection
}

type UserDeckConnection {
  edges: [UserDeckEdge!]!
  pageInfo: PageInfo!
}

type UserDeckDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserDeck!]!
}

type UserDeckEdge {
  cursor: String!
  node: UserDeck!
}

input UserDeckFilter {
  id: UUIDFilter
  uid: UUIDFilter
  lang: StringFilter
  nodeId: IDFilter
}

input UserDeckInsertInput {
  id: UUID
  uid: UUID
  lang: String
}

type UserDeckInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserDeck!]!
}

input UserDeckOrderBy {
  id: OrderByDirection
  uid: OrderByDirection
  lang: OrderByDirection
}

input UserDeckUpdateInput {
  id: UUID
  uid: UUID
  lang: String
}

type UserDeckUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserDeck!]!
}

type UserProfile implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  uid: UUID!
  username: String
  avatarUrl: String
  updatedAt: Datetime
  createdAt: Datetime!
  languagesSpoken: [String]!
  languagePrimary: String!
  userDeckCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserDeckFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserDeckOrderBy!]
  ): UserDeckConnection
  userCardCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: UserCardFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [UserCardOrderBy!]
  ): UserCardConnection
}

type UserProfileConnection {
  edges: [UserProfileEdge!]!
  pageInfo: PageInfo!
}

type UserProfileDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserProfile!]!
}

type UserProfileEdge {
  cursor: String!
  node: UserProfile!
}

input UserProfileFilter {
  uid: UUIDFilter
  username: StringFilter
  avatarUrl: StringFilter
  updatedAt: DatetimeFilter
  createdAt: DatetimeFilter
  languagePrimary: StringFilter
  nodeId: IDFilter
}

input UserProfileInsertInput {
  uid: UUID
  username: String
  avatarUrl: String
  updatedAt: Datetime
  createdAt: Datetime
  languagesSpoken: [String]
  languagePrimary: String
}

type UserProfileInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserProfile!]!
}

input UserProfileOrderBy {
  uid: OrderByDirection
  username: OrderByDirection
  avatarUrl: OrderByDirection
  updatedAt: OrderByDirection
  createdAt: OrderByDirection
  languagePrimary: OrderByDirection
}

input UserProfileUpdateInput {
  uid: UUID
  username: String
  avatarUrl: String
  updatedAt: Datetime
  createdAt: Datetime
  languagesSpoken: [String]
  languagePrimary: String
}

type UserProfileUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [UserProfile!]!
}

type buckets implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: String!
  name: String!
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  public: Boolean
  objectsCollection(
    """
    Query the first `n` records in the collection
    """
    first: Int

    """
    Query the last `n` records in the collection
    """
    last: Int

    """
    Query values in the collection before the provided cursor
    """
    before: Cursor

    """
    Query values in the collection after the provided cursor
    """
    after: Cursor

    """
    Filters to apply to the results set when querying from the collection
    """
    filter: objectsFilter

    """
    Sort order to apply to the collection
    """
    orderBy: [objectsOrderBy!]
  ): objectsConnection
}

type bucketsConnection {
  edges: [bucketsEdge!]!
  pageInfo: PageInfo!
}

type bucketsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [buckets!]!
}

type bucketsEdge {
  cursor: String!
  node: buckets!
}

input bucketsFilter {
  id: StringFilter
  name: StringFilter
  owner: UUIDFilter
  created_at: DatetimeFilter
  updated_at: DatetimeFilter
  public: BooleanFilter
  nodeId: IDFilter
}

input bucketsInsertInput {
  id: String
  name: String
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  public: Boolean
}

type bucketsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [buckets!]!
}

input bucketsOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  owner: OrderByDirection
  created_at: OrderByDirection
  updated_at: OrderByDirection
  public: OrderByDirection
}

input bucketsUpdateInput {
  id: String
  name: String
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  public: Boolean
}

type bucketsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [buckets!]!
}

type migrations implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: Int!
  name: String!
  hash: String!
  executed_at: Datetime
}

type migrationsConnection {
  edges: [migrationsEdge!]!
  pageInfo: PageInfo!
}

type migrationsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [migrations!]!
}

type migrationsEdge {
  cursor: String!
  node: migrations!
}

input migrationsFilter {
  id: IntFilter
  name: StringFilter
  hash: StringFilter
  executed_at: DatetimeFilter
  nodeId: IDFilter
}

input migrationsInsertInput {
  id: Int
  name: String
  hash: String
  executed_at: Datetime
}

type migrationsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [migrations!]!
}

input migrationsOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  hash: OrderByDirection
  executed_at: OrderByDirection
}

input migrationsUpdateInput {
  id: Int
  name: String
  hash: String
  executed_at: Datetime
}

type migrationsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [migrations!]!
}

type objects implements Node {
  """
  Globally Unique Record Identifier
  """
  nodeId: ID!
  id: UUID!
  bucket_id: String
  name: String
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  last_accessed_at: Datetime
  metadata: JSON
  path_tokens: [String]
  buckets: buckets
}

type objectsConnection {
  edges: [objectsEdge!]!
  pageInfo: PageInfo!
}

type objectsDeleteResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [objects!]!
}

type objectsEdge {
  cursor: String!
  node: objects!
}

input objectsFilter {
  id: UUIDFilter
  bucket_id: StringFilter
  name: StringFilter
  owner: UUIDFilter
  created_at: DatetimeFilter
  updated_at: DatetimeFilter
  last_accessed_at: DatetimeFilter
  nodeId: IDFilter
}

input objectsInsertInput {
  id: UUID
  bucket_id: String
  name: String
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  last_accessed_at: Datetime
  metadata: JSON
}

type objectsInsertResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [objects!]!
}

input objectsOrderBy {
  id: OrderByDirection
  bucket_id: OrderByDirection
  name: OrderByDirection
  owner: OrderByDirection
  created_at: OrderByDirection
  updated_at: OrderByDirection
  last_accessed_at: OrderByDirection
}

input objectsUpdateInput {
  id: UUID
  bucket_id: String
  name: String
  owner: UUID
  created_at: Datetime
  updated_at: Datetime
  last_accessed_at: Datetime
  metadata: JSON
}

type objectsUpdateResponse {
  """
  Count of the records impacted by the mutation
  """
  affectedCount: Int!

  """
  Array of records impacted by the mutation
  """
  records: [objects!]!
}
